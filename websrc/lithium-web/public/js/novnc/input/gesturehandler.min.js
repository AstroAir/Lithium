const GH_NOGESTURE=0,GH_ONETAP=1,GH_TWOTAP=2,GH_THREETAP=4,GH_DRAG=8,GH_LONGPRESS=16,GH_TWODRAG=32,GH_PINCH=64,GH_INITSTATE=127,GH_MOVE_THRESHOLD=50,GH_ANGLE_THRESHOLD=90,GH_MULTITOUCH_TIMEOUT=250,GH_TAP_TIMEOUT=1e3,GH_LONGPRESS_TIMEOUT=1e3,GH_TWOTOUCH_TIMEOUT=50;export default class GestureHandler{constructor(){this._target=null,this._state=127,this._tracked=[],this._ignored=[],this._waitingRelease=!1,this._releaseStart=0,this._longpressTimeoutId=null,this._twoTouchTimeoutId=null,this._boundEventHandler=this._eventHandler.bind(this)}attach(target){this.detach(),this._target=target,this._target.addEventListener("touchstart",this._boundEventHandler),this._target.addEventListener("touchmove",this._boundEventHandler),this._target.addEventListener("touchend",this._boundEventHandler),this._target.addEventListener("touchcancel",this._boundEventHandler)}detach(){this._target&&(this._stopLongpressTimeout(),this._stopTwoTouchTimeout(),this._target.removeEventListener("touchstart",this._boundEventHandler),this._target.removeEventListener("touchmove",this._boundEventHandler),this._target.removeEventListener("touchend",this._boundEventHandler),this._target.removeEventListener("touchcancel",this._boundEventHandler),this._target=null)}_eventHandler(e){let fn;switch(e.stopPropagation(),e.preventDefault(),e.type){case"touchstart":fn=this._touchStart;break;case"touchmove":fn=this._touchMove;break;case"touchend":case"touchcancel":fn=this._touchEnd}for(let i=0;i<e.changedTouches.length;i++){let touch=e.changedTouches[i];fn.call(this,touch.identifier,touch.clientX,touch.clientY)}}_touchStart(id,x,y){if(this._hasDetectedGesture()||0===this._state)this._ignored.push(id);else{if(this._tracked.length>0&&Date.now()-this._tracked[0].started>250)return this._state=0,void this._ignored.push(id);if(this._waitingRelease)return this._state=0,void this._ignored.push(id);switch(this._tracked.push({id:id,started:Date.now(),active:!0,firstX:x,firstY:y,lastX:x,lastY:y,angle:0}),this._tracked.length){case 1:this._startLongpressTimeout();break;case 2:this._state&=-26,this._stopLongpressTimeout();break;case 3:this._state&=-99;break;default:this._state=0}}}_touchMove(id,x,y){let touch=this._tracked.find(t=>t.id===id);if(void 0===touch)return;touch.lastX=x,touch.lastY=y;let deltaX=x-touch.firstX,deltaY=y-touch.firstY;if(touch.firstX===touch.lastX&&touch.firstY===touch.lastY||(touch.angle=180*Math.atan2(deltaY,deltaX)/Math.PI),!this._hasDetectedGesture()){if(Math.hypot(deltaX,deltaY)<50)return;if(this._state&=-24,this._stopLongpressTimeout(),1!==this._tracked.length&&(this._state&=-9),2!==this._tracked.length&&(this._state&=-97),2===this._tracked.length){let prevTouch=this._tracked.find(t=>t.id!==id),prevDeltaMove;if(Math.hypot(prevTouch.firstX-prevTouch.lastX,prevTouch.firstY-prevTouch.lastY)>50){let deltaAngle=Math.abs(touch.angle-prevTouch.angle);deltaAngle=Math.abs((deltaAngle+180)%360-180),this._state&=deltaAngle>90?-33:-65,this._isTwoTouchTimeoutRunning()&&this._stopTwoTouchTimeout()}else this._isTwoTouchTimeoutRunning()||this._startTwoTouchTimeout()}if(!this._hasDetectedGesture())return;this._pushEvent("gesturestart")}this._pushEvent("gesturemove")}_touchEnd(id,x,y){if(-1!==this._ignored.indexOf(id))return this._ignored.splice(this._ignored.indexOf(id),1),void(0===this._ignored.length&&0===this._tracked.length&&(this._state=127,this._waitingRelease=!1));if(!this._hasDetectedGesture()&&this._isTwoTouchTimeoutRunning()&&(this._stopTwoTouchTimeout(),this._state=0),!this._hasDetectedGesture()&&(this._state&=-105,this._state&=-17,this._stopLongpressTimeout(),!this._waitingRelease))switch(this._releaseStart=Date.now(),this._waitingRelease=!0,this._tracked.length){case 1:this._state&=-7;break;case 2:this._state&=-6}if(this._waitingRelease){let touch;if(Date.now()-this._releaseStart>250&&(this._state=0),this._tracked.some(t=>Date.now()-t.started>1e3)&&(this._state=0),this._tracked.find(t=>t.id===id).active=!1,this._hasDetectedGesture())this._pushEvent("gesturestart");else if(0!==this._state)return}this._hasDetectedGesture()&&this._pushEvent("gestureend");for(let i=0;i<this._tracked.length;i++)this._tracked[i].active&&this._ignored.push(this._tracked[i].id);this._tracked=[],this._state=0,-1!==this._ignored.indexOf(id)&&this._ignored.splice(this._ignored.indexOf(id),1),0===this._ignored.length&&(this._state=127,this._waitingRelease=!1)}_hasDetectedGesture(){return 0!==this._state&&(!(this._state&this._state-1)&&!(7&this._state&&this._tracked.some(t=>t.active)))}_startLongpressTimeout(){this._stopLongpressTimeout(),this._longpressTimeoutId=setTimeout(()=>this._longpressTimeout(),1e3)}_stopLongpressTimeout(){clearTimeout(this._longpressTimeoutId),this._longpressTimeoutId=null}_longpressTimeout(){if(this._hasDetectedGesture())throw new Error("A longpress gesture failed, conflict with a different gesture");this._state=16,this._pushEvent("gesturestart")}_startTwoTouchTimeout(){this._stopTwoTouchTimeout(),this._twoTouchTimeoutId=setTimeout(()=>this._twoTouchTimeout(),50)}_stopTwoTouchTimeout(){clearTimeout(this._twoTouchTimeoutId),this._twoTouchTimeoutId=null}_isTwoTouchTimeoutRunning(){return null!==this._twoTouchTimeoutId}_twoTouchTimeout(){if(0===this._tracked.length)throw new Error("A pinch or two drag gesture failed, no tracked touches");let avgM=this._getAverageMovement(),avgMoveH=Math.abs(avgM.x),avgMoveV=Math.abs(avgM.y),avgD=this._getAverageDistance(),deltaTouchDistance=Math.abs(Math.hypot(avgD.first.x,avgD.first.y)-Math.hypot(avgD.last.x,avgD.last.y));this._state=avgMoveV<deltaTouchDistance&&avgMoveH<deltaTouchDistance?64:32,this._pushEvent("gesturestart"),this._pushEvent("gesturemove")}_pushEvent(type){let detail={type:this._stateToGesture(this._state)},avg=this._getPosition(),pos=avg.last;switch("gesturestart"===type&&(pos=avg.first),this._state){case 32:case 64:pos=avg.first}if(detail.clientX=pos.x,detail.clientY=pos.y,64===this._state){let distance=this._getAverageDistance();"gesturestart"===type?(detail.magnitudeX=distance.first.x,detail.magnitudeY=distance.first.y):(detail.magnitudeX=distance.last.x,detail.magnitudeY=distance.last.y)}else if(32===this._state)if("gesturestart"===type)detail.magnitudeX=0,detail.magnitudeY=0;else{let movement=this._getAverageMovement();detail.magnitudeX=movement.x,detail.magnitudeY=movement.y}let gev=new CustomEvent(type,{detail:detail});this._target.dispatchEvent(gev)}_stateToGesture(state){switch(state){case 1:return"onetap";case 2:return"twotap";case 4:return"threetap";case 8:return"drag";case 16:return"longpress";case 32:return"twodrag";case 64:return"pinch"}throw new Error("Unknown gesture state: "+state)}_getPosition(){if(0===this._tracked.length)throw new Error("Failed to get gesture position, no tracked touches");let size=this._tracked.length,fx=0,fy=0,lx=0,ly=0;for(let i=0;i<this._tracked.length;i++)fx+=this._tracked[i].firstX,fy+=this._tracked[i].firstY,lx+=this._tracked[i].lastX,ly+=this._tracked[i].lastY;return{first:{x:fx/size,y:fy/size},last:{x:lx/size,y:ly/size}}}_getAverageMovement(){if(0===this._tracked.length)throw new Error("Failed to get gesture movement, no tracked touches");let totalH,totalV;totalH=totalV=0;let size=this._tracked.length;for(let i=0;i<this._tracked.length;i++)totalH+=this._tracked[i].lastX-this._tracked[i].firstX,totalV+=this._tracked[i].lastY-this._tracked[i].firstY;return{x:totalH/size,y:totalV/size}}_getAverageDistance(){if(0===this._tracked.length)throw new Error("Failed to get gesture distance, no tracked touches");let first=this._tracked[0],last=this._tracked[this._tracked.length-1],fdx,fdy,ldx,ldy;return{first:{x:Math.abs(last.firstX-first.firstX),y:Math.abs(last.firstY-first.firstY)},last:{x:Math.abs(last.lastX-first.lastX),y:Math.abs(last.lastY-first.lastY)}}}}