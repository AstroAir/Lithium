import KeyTable from"./keysym.min.js";import keysyms from"./keysymdef.min.js";import vkeys from"./vkeys.min.js";import fixedkeys from"./fixedkeys.min.js";import DOMKeyTable from"./domkeytable.min.js";import*as browser from"../util/browser.min.js";export function getKeycode(evt){if(evt.code){switch(evt.code){case"OSLeft":return"MetaLeft";case"OSRight":return"MetaRight"}return evt.code}if(evt.keyCode in vkeys){let code=vkeys[evt.keyCode];if(browser.isMac()&&"ContextMenu"===code&&(code="MetaRight"),2===evt.location)switch(code){case"ShiftLeft":return"ShiftRight";case"ControlLeft":return"ControlRight";case"AltLeft":return"AltRight"}if(3===evt.location)switch(code){case"Delete":return"NumpadDecimal";case"Insert":return"Numpad0";case"End":return"Numpad1";case"ArrowDown":return"Numpad2";case"PageDown":return"Numpad3";case"ArrowLeft":return"Numpad4";case"ArrowRight":return"Numpad6";case"Home":return"Numpad7";case"ArrowUp":return"Numpad8";case"PageUp":return"Numpad9";case"Enter":return"NumpadEnter"}return code}return"Unidentified"}export function getKey(evt){if(void 0!==evt.key){switch(evt.key){case"OS":return"Meta";case"LaunchMyComputer":return"LaunchApplication1";case"LaunchCalculator":return"LaunchApplication2"}switch(evt.key){case"UIKeyInputUpArrow":return"ArrowUp";case"UIKeyInputDownArrow":return"ArrowDown";case"UIKeyInputLeftArrow":return"ArrowLeft";case"UIKeyInputRightArrow":return"ArrowRight";case"UIKeyInputEscape":return"Escape"}return"\0"===evt.key&&"NumpadDecimal"===evt.code?"Delete":evt.key}const code=getKeycode(evt);return code in fixedkeys?fixedkeys[code]:evt.charCode?String.fromCharCode(evt.charCode):"Unidentified"}export function getKeysym(evt){const key=getKey(evt);if("Unidentified"===key)return null;if(key in DOMKeyTable){let location=evt.location;if("Meta"===key&&0===location&&(location=2),"Clear"===key&&3===location){let code;"NumLock"===getKeycode(evt)&&(location=0)}if((void 0===location||location>3)&&(location=0),"Meta"===key){let code=getKeycode(evt);if("AltLeft"===code)return KeyTable.XK_Meta_L;if("AltRight"===code)return KeyTable.XK_Meta_R}if("Clear"===key){let code;if("NumLock"===getKeycode(evt))return KeyTable.XK_Num_Lock}if(browser.isWindows())switch(key){case"Zenkaku":case"Hankaku":return KeyTable.XK_Zenkaku_Hankaku;case"Romaji":case"KanaMode":return KeyTable.XK_Romaji}return DOMKeyTable[key][location]}if(1!==key.length)return null;const codepoint=key.charCodeAt();return codepoint?keysyms.lookup(codepoint):null}