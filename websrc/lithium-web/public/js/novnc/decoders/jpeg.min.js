export default class JPEGDecoder{constructor(){this._quantTables=[],this._huffmanTables=[],this._cachedQuantTables=[],this._cachedHuffmanTables=[],this._jpegLength=0,this._segments=[]}decodeRect(x,y,width,height,sock,display,depth){if(!this._parseJPEG(sock.rQslice(0)))return!1;const data=sock.rQshiftBytes(this._jpegLength);if(0!=this._quantTables.length&&0!=this._huffmanTables.length)return display.imageRect(x,y,width,height,"image/jpeg",data),!0;{const sofIndex=this._segments.findIndex(x=>192==x[1]||194==x[1]);if(-1==sofIndex)throw new Error("Illegal JPEG image without SOF");let segments=this._segments.slice(0,sofIndex);segments=segments.concat(this._quantTables.length?this._quantTables:this._cachedQuantTables),segments.push(this._segments[sofIndex]),segments=segments.concat(this._huffmanTables.length?this._huffmanTables:this._cachedHuffmanTables,this._segments.slice(sofIndex+1));let length=0;for(let i=0;i<segments.length;i++)length+=segments[i].length;const data=new Uint8Array(length);length=0;for(let i=0;i<segments.length;i++)data.set(segments[i],length),length+=segments[i].length;return display.imageRect(x,y,width,height,"image/jpeg",data),!0}}_parseJPEG(buffer){0!=this._quantTables.length&&(this._cachedQuantTables=this._quantTables),0!=this._huffmanTables.length&&(this._cachedHuffmanTables=this._huffmanTables),this._quantTables=[],this._huffmanTables=[],this._segments=[];let i=0,bufferLength=buffer.length;for(;;){let j=i;if(j+2>bufferLength)return!1;if(255!=buffer[j])throw new Error("Illegal JPEG marker received (byte: "+buffer[j]+")");const type=buffer[j+1];if(j+=2,217==type)return this._jpegLength=j,this._segments.push(buffer.slice(i,j)),!0;if(218==type){let hasFoundEndOfScan=!1;for(let k=j+3;k+1<bufferLength;k++)if(255==buffer[k]&&0!=buffer[k+1]&&!(buffer[k+1]>=208&&buffer[k+1]<=215)){j=k,hasFoundEndOfScan=!0;break}if(!hasFoundEndOfScan)return!1;this._segments.push(buffer.slice(i,j)),i=j;continue}if(type>=208&&type<217||1==type){this._segments.push(buffer.slice(i,j)),i=j;continue}if(j+2>bufferLength)return!1;const length=(buffer[j]<<8)+buffer[j+1]-2;if(length<0)throw new Error("Illegal JPEG length received (length: "+length+")");if(j+=2,j+length>bufferLength)return!1;j+=length;const segment=buffer.slice(i,j);196==type?this._huffmanTables.push(segment):219==type&&this._quantTables.push(segment),this._segments.push(segment),i=j}}}