import*as Log from"./util/logging.min.js";export default{toBase64Table:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".split(""),base64Pad:"=",encode(data){"use strict";let result="";const length=data.length,lengthpad=length%3;for(let i=0;i<length-2;i+=3)result+=this.toBase64Table[data[i]>>2],result+=this.toBase64Table[((3&data[i])<<4)+(data[i+1]>>4)],result+=this.toBase64Table[((15&data[i+1])<<2)+(data[i+2]>>6)],result+=this.toBase64Table[63&data[i+2]];const j=length-lengthpad;return 2===lengthpad?(result+=this.toBase64Table[data[j]>>2],result+=this.toBase64Table[((3&data[j])<<4)+(data[j+1]>>4)],result+=this.toBase64Table[(15&data[j+1])<<2],result+=this.toBase64Table[64]):1===lengthpad&&(result+=this.toBase64Table[data[j]>>2],result+=this.toBase64Table[(3&data[j])<<4],result+=this.toBase64Table[64],result+=this.toBase64Table[64]),result},toBinaryTable:[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,62,-1,-1,-1,63,52,53,54,55,56,57,58,59,60,61,-1,-1,-1,0,-1,-1,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,-1,-1,-1,-1,-1,-1,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,-1,-1,-1,-1,-1],decode(data,offset=0){let dataLength=data.indexOf("=")-offset;dataLength<0&&(dataLength=data.length-offset);const resultLength=3*(dataLength>>2)+Math.floor(dataLength%4/1.5),result=new Array(resultLength);let leftbits=0,leftdata=0;for(let idx=0,i=offset;i<data.length;i++){const c=this.toBinaryTable[127&data.charCodeAt(i)],padding=data.charAt(i)===this.base64Pad;-1!==c?(leftdata=leftdata<<6|c,leftbits+=6,leftbits>=8&&(leftbits-=8,padding||(result[idx++]=leftdata>>leftbits&255),leftdata&=(1<<leftbits)-1)):Log.Error("Illegal character code "+data.charCodeAt(i)+" at position "+i)}if(leftbits){const err=new Error("Corrupted base64 string");throw err.name="Base64-Error",err}return result}};