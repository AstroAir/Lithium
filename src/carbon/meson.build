project('Carbon', 'cpp',
  version: '7.0.0',
  license: 'BSD',
  default_options: ['cpp_std=c++20', 'warning_level=3']
)

# 选项
option('multithread_support_enabled', type: 'boolean', value: true, description: 'Multithreaded Support Enabled')
option('dynload_enabled', type: 'boolean', value: true, description: 'Dynamic Loading Support Enabled')
option('build_modules', type: 'boolean', value: true, description: 'Build Extra Modules (stl)')
option('build_samples', type: 'boolean', value: false, description: 'Build Samples Folder')
option('run_fuzzy_tests', type: 'boolean', value: false, description: 'Run tests generated by AFL')
option('use_std_make_shared', type: 'boolean', value: false, description: 'Use std::make_shared instead of Carbon::make_shared')
option('run_performance_tests', type: 'boolean', value: false, description: 'Run Performance Tests')
option('enable_coverage', type: 'boolean', value: false, description: 'Enable Coverage Reporting in GCC')
option('enable_thread_sanitizer', type: 'boolean', value: false, description: 'Enable thread sanitizer testing in gcc/clang')
option('enable_address_sanitizer', type: 'boolean', value: false, description: 'Enable address sanitizer testing in gcc/clang')
option('enable_memory_sanitizer', type: 'boolean', value: false, description: 'Enable memory sanitizer testing in gcc/clang')
option('enable_undefined_sanitizer', type: 'boolean', value: false, description: 'Enable undefined behavior sanitizer testing in gcc/clang')
option('enable_lto', type: 'boolean', value: false, description: 'Enable Link Time Optimization')
option('gprof_output', type: 'boolean', value: false, description: 'Generate profile data')
option('profile_generate', type: 'boolean', value: false, description: 'Generate profile data')
option('profile_use', type: 'boolean', value: false, description: 'Use profile data')
option('use_libcxx', type: 'boolean', value: false, description: 'Use clang\'s libcxx')

# 构建标志
cxx_flags = []
linker_flags = []
if get_option('use_std_make_shared')
  cxx_flags += ['-DCarbon_USE_STD_MAKE_SHARED']
endif

if host_machine.system() == 'windows'
  cxx_flags += ['/W4', '/w14545', '/w34242', '/w34254', '/w34287', '/w44263', '/w44265', '/w44296', '/w44311', '/w44826', '/we4289', '/w14546', '/w14547', '/w14549', '/w14555', '/w14619', '/w14905', '/w14906', '/w14928', '/bigobj', '/permissive-', '/utf-8', '/wd4503']
else
  cxx_flags += ['-Wall', '-Wextra', '-Wconversion', '-Wshadow', '-Wnon-virtual-dtor', '-Wold-style-cast', '-Wcast-align', '-Wcast-qual', '-Wunused', '-Woverloaded-virtual', '-Wpedantic', '-Werror=return-type']
  if meson.get_compiler('cpp').get_id() == 'clang'
    cxx_flags += ['-Weverything', '-Wno-c++98-compat-pedantic', '-Wno-c++98-compat', '-Wno-documentation', '-Wno-switch-enum', '-Wno-weak-vtables', '-Wno-missing-prototypes', '-Wno-padded', '-Wno-missing-noreturn', '-Wno-exit-time-destructors', '-Wno-documentation-unknown-command', '-Wno-unused-template', '-Wno-undef', '-Wno-double-promotion']
  endif
endif

# 处理各种 Sanitizer 选项
if get_option('enable_thread_sanitizer')
  cxx_flags += ['-fsanitize=thread', '-g']
  linker_flags += ['-fsanitize=thread']
endif

if get_option('enable_address_sanitizer')
  cxx_flags += ['-fsanitize=address', '-g']
  linker_flags += ['-fsanitize=address']
endif

if get_option('enable_memory_sanitizer')
  cxx_flags += ['-fsanitize=memory', '-fsanitize-memory-track-origins', '-g']
  linker_flags += ['-fsanitize=memory', '-fsanitize-memory-track-origins']
endif

if get_option('enable_undefined_sanitizer')
  cxx_flags += ['-fsanitize=undefined', '-g']
  linker_flags += ['-fsanitize=undefined']
endif

if get_option('enable_lto')
  add_project_arguments(['-flto'], language: 'cpp')
  add_project_link_arguments(['-flto'], language: 'cpp')
endif

# 处理 Coverage 和 Profiling 选项
if get_option('enable_coverage')
  cxx_flags += ['--coverage', '-O0']
  linker_flags += ['--coverage']
endif

if get_option('gprof_output')
  cxx_flags += ['-pg']
  linker_flags += ['-pg']
endif

if get_option('profile_generate')
  cxx_flags += ['-fprofile-generate']
  linker_flags += ['-fprofile-generate']
endif

if get_option('profile_use')
  cxx_flags += ['-fprofile-use']
  linker_flags += ['-fprofile-use']
endif

# 添加编译和链接选项
add_project_arguments(cxx_flags, language: 'cpp')
add_project_link_arguments(linker_flags, language: 'cpp')

# 查找依赖项
thread_dep = dependency('threads')
readline_dep = dependency('readline', required: false)
valgrind = find_program('valgrind', required: false)

# 源文件和头文件
carbon_src = files(
  'command/bad_boxed_cast.cpp',
  'command/boxed_number.cpp',
  'command/dispatchkit.cpp',
  'command/dynamic_object_detail.cpp',
  'command/dynamic_object.cpp',
  'command/proxy_functions.cpp',
  'language/common.cpp',
  'language/engine.cpp',
  'language/prelude.cpp'
)

carbon_inc = files(
  'command/bad_boxed_cast.hpp',
  'command/bind_first.hpp',
  'command/bootstrap.hpp',
  'command/bootstrap_stl.hpp',
  'command/boxed_cast.hpp',
  'command/boxed_cast_helper.hpp',
  'command/boxed_number.hpp',
  'command/boxed_value.hpp',
  'command/dispatchkit.hpp',
  'command/type_conversions.hpp',
  'command/dynamic_object.hpp',
  'command/exception_specification.hpp',
  'command/function_call.hpp',
  'command/function_call_detail.hpp',
  'command/handle_return.hpp',
  'command/operators.hpp',
  'command/proxy_constructors.hpp',
  'command/proxy_functions.hpp',
  'command/proxy_functions_detail.hpp',
  'command/register_function.hpp',
  'command/type_info.hpp',
  'language/algebraic.hpp',
  'language/common.hpp',
  'language/engine.hpp',
  'language/eval.hpp',
  'language/parser.hpp',
  'language/prelude.hpp',
  'language/prelude_docs.hpp',
  'utils/utility.hpp',
  'utils/json.hpp',
  'utils/json_wrap.hpp'
)

# Carbon 库
carbon_lib = static_library(
  'carbon',
  carbon_src,
  include_directories: include_directories('include'),
  dependencies: [thread_dep, readline_dep]
)

# Carbon 接口库
carbon_iface = library(
  'Carbon',
  [],
  include_directories: include_directories('include'),
  install: true,
  type: 'interface'
)

# 样例程序
if get_option('build_samples')
  executable('sanity_checks', 'src/sanity_checks.cpp', dependencies: [carbon_lib, thread_dep, readline_dep])
  executable('test_num_exceptions', 'samples/test_num_exceptions.cpp', dependencies: [carbon_lib, thread_dep, readline_dep])
  executable('memory_leak_test', 'samples/memory_leak_test.cpp', dependencies: [carbon_lib, thread_dep, readline_dep])
  executable('inheritance', 'samples/inheritance.cpp', dependencies: [carbon_lib, thread_dep, readline_dep])
  executable('factory', 'samples/factory.cpp', dependencies: [carbon_lib, thread_dep, readline_dep])
  executable('fun_call_performance', 'samples/fun_call_performance.cpp', dependencies: [carbon_lib, thread_dep, readline_dep])
endif

# 模块（如果需要）
if get_option('build_modules')
  # 示例模块
  # module('test_module', 'src/test_module.cpp', dependencies: [carbon_lib, thread_dep, readline_dep])
  # module('stl_extra', 'src/stl_extra.cpp', dependencies: [carbon_lib, thread_dep, readline_dep])
endif

# 安装头文件
install_headers(carbon_inc, subdir: 'Carbon')
