#ifndef LITHIUM_ADDON_COMPILER_ANALYSIS_HPP
#define LITHIUM_ADDON_COMPILER_ANALYSIS_HPP

#include <memory>
#include <string>
#include <vector>

#include "atom/type/json_fwd.hpp"
using json = nlohmann::json;

#include "atom/macro.hpp"

namespace lithium {

/**
 * @enum MessageType
 * @brief Represents the type of a compiler message.
 *
 * This enum class categorizes the types of messages that can be generated by a
 * compiler.
 */
enum class MessageType {
    ERROR,   /**< Indicates a compilation error. */
    WARNING, /**< Indicates a compilation warning. */
    NOTE,    /**< Provides additional information or notes. */
    UNKNOWN  /**< Represents an unknown type of message. */
};

/**
 * @struct Message
 * @brief Holds information about a single compiler message.
 *
 * This structure encapsulates all the details related to a compiler message,
 * including its type, location in the source code, error code, and additional
 * context.
 */
struct Message {
    MessageType
        type; /**< The type of the message (error, warning, note, unknown). */
    std::string file; /**< The file in which the message was generated. */
    int line; /**< The line number in the file where the message was generated.
               */
    int column; /**< The column number in the line where the message was
                   generated. */
    std::string errorCode; /**< The error code associated with the message. */
    std::string functionName; /**< The name of the function where the message
                                 was generated. */
    std::string message;      /**< The actual message text. */
    std::string context; /**< Additional context or code snippet related to the
                            message. */
    std::vector<std::string>
        relatedNotes; /**< Related notes or additional messages. */

    /**
     * @brief Constructs a Message object.
     *
     * @param t The type of the message.
     * @param f The file in which the message was generated.
     * @param l The line number in the file where the message was generated.
     * @param c The column number in the line where the message was generated.
     * @param code The error code associated with the message.
     * @param func The name of the function where the message was generated.
     * @param msg The actual message text.
     * @param ctx Additional context or code snippet related to the message.
     */
    Message(MessageType t, std::string f, int l, int c, std::string code,
            std::string func, std::string msg, std::string ctx);
} ATOM_ALIGNAS(128);

/**
 * @class CompilerOutputParser
 * @brief Parses compiler output and generates reports.
 *
 * Uses regular expressions to parse compiler messages from various compilers,
 * supports both single-threaded and multi-threaded parsing.
 */
class CompilerOutputParser {
public:
    /**
     * @brief Constructs a CompilerOutputParser object.
     */
    CompilerOutputParser();

    /**
     * @brief Destroys the CompilerOutputParser object.
     */
    ~CompilerOutputParser();

    // Delete copy constructor and copy assignment to avoid copying state
    CompilerOutputParser(const CompilerOutputParser&) = delete;
    CompilerOutputParser& operator=(const CompilerOutputParser&) = delete;

    // Enable move semantics
    CompilerOutputParser(CompilerOutputParser&&) noexcept;
    CompilerOutputParser& operator=(CompilerOutputParser&&) noexcept;

    /**
     * @brief Parses a single line of compiler output.
     *
     * @param line The line of compiler output to parse.
     */
    void parseLine(const std::string& line);

    /**
     * @brief Parses a file containing compiler output.
     *
     * @param filename The name of the file to parse.
     */
    void parseFile(const std::string& filename);

    /**
     * @brief Parses a file containing compiler output using multiple threads.
     *
     * @param filename The name of the file to parse.
     * @param numThreads The number of threads to use for parsing.
     */
    void parseFileMultiThreaded(const std::string& filename, int numThreads);

    /**
     * @brief Generates a report of the parsed compiler messages.
     *
     * @param detailed If true, generates a detailed report; otherwise,
     * generates a summary report.
     * @return A string containing the report.
     */
    auto getReport(bool detailed = true) const -> std::string;

    /**
     * @brief Generates an HTML report of the parsed compiler messages.
     *
     * @param outputFilename The name of the file to write the HTML report to.
     */
    void generateHtmlReport(const std::string& outputFilename) const;

    /**
     * @brief Generates a JSON report of the parsed compiler messages.
     *
     * @return A JSON object containing the report.
     */
    auto generateJsonReport() -> json;

    /**
     * @brief Sets a custom regular expression pattern for parsing compiler
     * messages.
     *
     * @param compiler The name of the compiler.
     * @param pattern The regular expression pattern to use for parsing messages
     * from the specified compiler.
     */
    void setCustomRegexPattern(const std::string& compiler,
                               const std::string& pattern);

private:
    class Impl;                   // Forward declaration of implementation class
    std::unique_ptr<Impl> pImpl;  // PIMPL idiom, pointer to implementation
};

}  // namespace lithium

#endif  // LITHIUM_ADDON_COMPILER_ANALYSIS_HPP
